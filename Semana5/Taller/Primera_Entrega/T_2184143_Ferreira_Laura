{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "f8afd6f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import sympy as sp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "c2aadfdc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ASIGNO DATOS INICIALES\n",
    "\n",
    "## Datos del código deestudiante \n",
    "\n",
    "x = 2 + 1 + 8 + 4 + 1 + 4 + 3\n",
    "\n",
    "## Cables.\n",
    "# Longitudes de cables en [m]\n",
    "\n",
    "CB = 1.5\n",
    "DB = 1.5\n",
    "EB = 1.5 \n",
    "\n",
    "# Diametro de cables [m]\n",
    "\n",
    "diametro = (1/4) * (1/39.970)\n",
    "\n",
    "# Area de cables \n",
    "\n",
    "area_cables = np.pi * (diametro/2) ** 2\n",
    "\n",
    "\n",
    "\n",
    "# Longitud barra AB\n",
    "\n",
    "L = 4.6\n",
    "\n",
    "# Diametro de pasadores [m]\n",
    "\n",
    "diametro_pasadores = (1/2) * (1/39.970)\n",
    "\n",
    "# Area de pasadores \n",
    "\n",
    "area_pasadores = np.pi * (diametro_pasadores/2) ** 2\n",
    "\n",
    "\n",
    "\n",
    "# Factor de Seguridad - esfuerzo de fluencia \n",
    "\n",
    "FS = 1.23\n",
    "\n",
    "# Factor de seguridad - esfuerzo último\n",
    "\n",
    "FS_ultimo = 1.26"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "cd751e7c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Angulos de los cables cables\n",
    "\n",
    "angulo_BE = 50 * np.pi / 180\n",
    "angulo_BC = 40 * np.pi / 180"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "4dfac17f",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Propiedades mecánicas de ASTM A-36.\n",
    "\n",
    "E = 200 #[GPa]\n",
    "flu_corte = 145 #[MPa]\n",
    "esfuerzo_ultimo = 400 #[MPa]\n",
    "flu_traccion = 250 #[MPa]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "7be70210",
   "metadata": {},
   "outputs": [],
   "source": [
    "## EQUILIBRIO\n",
    "\n",
    "# Incognitas [MPa]\n",
    "Ax = sp.symbols('Ax')\n",
    "Ay = sp.symbols('Ay')\n",
    "F_bc = sp.symbols('F_bc')\n",
    "F_bd = sp.symbols('F_bd')\n",
    "F_be = sp.symbols('F_be')\n",
    "w = sp.symbols('w')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "7be70210",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle 3.5238044383473 F_{bc} + 4.6 F_{bd} + 2.95682300455808 F_{be} - 2.3 w = 0$"
      ],
      "text/plain": [
       "Eq(3.5238044383473*F_bc + 4.6*F_bd + 2.95682300455808*F_be - 2.3*w, 0)"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Momentos \n",
    "# ƩMA=0\n",
    "\n",
    "M_a = - w * (L/2) + F_bc * sp.cos(angulo_BC) * L + F_be * sp.cos(angulo_BE) * L + F_bd * L\n",
    "momentos = sp.Eq(M_a, 0)\n",
    "momentos\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "16fd89de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle Ax - 0.642787609686539 F_{bc} + 0.766044443118978 F_{be} = 0$"
      ],
      "text/plain": [
       "Eq(Ax - 0.642787609686539*F_bc + 0.766044443118978*F_be, 0)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Eje x\n",
    "# ƩFx=0\n",
    "\n",
    "Fx = Ax - F_bc * sp.sin(angulo_BC) + F_be * sp.sin(angulo_BE)\n",
    "FX = sp.Eq(Fx, 0)\n",
    "FX\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "3530e3ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle Ay + 1.76604444311898 F_{bd} + 0.642787609686539 F_{be} - 4.6 w = 0$"
      ],
      "text/plain": [
       "Eq(Ay + 1.76604444311898*F_bd + 0.642787609686539*F_be - 4.6*w, 0)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Eje y\n",
    "# ƩFy=0\n",
    "\n",
    "Fy = Ay - w * L + F_bd * sp.cos(angulo_BC) + F_be * sp.cos(angulo_BE) + F_bd\n",
    "FY = sp.Eq(Fy, 0)\n",
    "FY"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "378fff23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle F_{bc} - 0.766044443118978 F_{bd} = 0$"
      ],
      "text/plain": [
       "Eq(F_bc - 0.766044443118978*F_bd, 0)"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compatibilidad - Relación BC -BD - deformaciones de la viga\n",
    "\n",
    "bcbd = sp.Eq(F_bc - F_bd * sp.cos(angulo_BC), 0)\n",
    "expresion_bcbd= F_bd * sp.cos(angulo_BC)\n",
    "bcbd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "96538ffb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle - 0.642787609686539 F_{bd} + F_{be} = 0$"
      ],
      "text/plain": [
       "Eq(-0.642787609686539*F_bd + F_be, 0)"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compatibilidad - Relación BE -BD - deformaciones de la viga\n",
    "\n",
    "bebd = sp.Eq(F_be - F_bd * sp.cos(angulo_BE), 0)\n",
    "expresion_bebd = F_bd * sp.cos(angulo_BE)\n",
    "bebd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "642fc36e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle 9.2 F_{bd} - 2.3 w = 0$"
      ],
      "text/plain": [
       "Eq(9.2*F_bd - 2.3*w, 0)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# ƩMA=0 y Compatibilidad\n",
    "\n",
    "ecuacion = sp.Eq(M_a.subs([(F_bc, expresion_bcbd), (F_be, expresion_bebd)]), 0)\n",
    "ecuacion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "d95cd4c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle 0.25 w$"
      ],
      "text/plain": [
       "0.25*w"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "#bd en términos de W\n",
    "bdW = sp.solve(ecuacion)[0][F_bd]\n",
    "bdW "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "83dbb9a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Eq(F_bc - 0.191511110779745*w, 0), 0.25*w, Eq(F_be - 0.160696902421635*w, 0)]"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# F_bc y F_be en funcion de W\n",
    "\n",
    "bc = bcbd.subs(F_bd, bdW)\n",
    "be = bebd.subs(F_bd, bdW)\n",
    "fuerzas_cables = [bc, bdW, be]\n",
    "fuerzas_cables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "ffba7518",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.75418635080043 14.4885353357012\n",
      "9.75418635080043 14.4885353357012\n",
      "9.75418635080043 14.4885353357012\n",
      "Carga máxima que soportan los cables [kN / m]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "Wmax = []\n",
    "F_1 = sp.symbols('F_1')\n",
    "for fuerza in fuerzas_cables:\n",
    "    # Esfuerzo normal en los cables\n",
    "    \n",
    "    esfuerzo_normal = sp.Eq(F_1 / area_cables, esfuerzo_ultimo * 10 ** 6 / FS_ultimo)\n",
    "    W_cab = sp.solve(esfuerzo_normal)[0] / 1000\n",
    "    \n",
    "    # Esfuero cortante en los pasadores C, D y E\n",
    "    \n",
    "    esfuerzo_cortante = sp.Eq(F_1 / area_pasadores, flu_corte * 10 ** 6 / FS)\n",
    "    W_pas = sp.solve(esfuerzo_cortante)[0] / 1000\n",
    "    print(W_cab, W_pas)\n",
    "    Wmax.append(W_cab)\n",
    "    Wmax.append(W_pas)\n",
    "\n",
    "print(\"Carga máxima que soportan los cables [kN / m]\")\n",
    "min(Wmax)\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "d5145776",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle 4.05519491142862 w$"
      ],
      "text/plain": [
       "4.05519491142862*w"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Análisis en los pasadores de la Barra AB\n",
    "\n",
    "RAy = Fy.subs([(F_bc, expresion_bcbd), (F_be, expresion_bebd), (F_bd, bdW)])\n",
    "equivalencia_RAy = sp.solve(sp.Eq(RAy, 0))\n",
    "Eqv_RAy = equivalencia_RAy[0][Ay]\n",
    "Eqv_RAy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "c59e685d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle - 2.77555756156289 \\cdot 10^{-17} w$"
      ],
      "text/plain": [
       "-2.77555756156289e-17*w"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RAx  = Fx.subs([(F_bc, expresion_bcbd), (F_be, expresion_bebd), (F_bd, bdW)])\n",
    "Eqv_RAx = sp.solve(sp.Eq(RAx , 0))\n",
    "Eqv_RAx = Eqv_RAx[0][Ax]\n",
    "Eqv_RAx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "c90ec3d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle 4.05519491142862 \\sqrt{w^{2}}$"
      ],
      "text/plain": [
       "4.05519491142862*sqrt(w**2)"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# FA = (Ax^2+Ay^2)^1/2\n",
    "\n",
    "F_A = sp.sqrt(Eqv_RAy ** 2 + Eqv_RAx ** 2)\n",
    "F_A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "8a210f99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle 0.5 \\sqrt{w^{2}}$"
      ],
      "text/plain": [
       "0.5*sqrt(w**2)"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fuerza en B \n",
    "\n",
    "F_Bx = expresion_bebd.subs(F_bd, bdW) * sp.sin(angulo_BE) - expresion_bcbd.subs(F_bd, bdW) * sp.sin(angulo_BC)\n",
    "F_By = expresion_bebd.subs(F_bd, bdW) * sp.cos(angulo_BE) + expresion_bcbd.subs(F_bd, bdW) * sp.cos(angulo_BC) + bdW\n",
    "F_B = sp.sqrt(F_Bx ** 2 + F_By ** 2)\n",
    "F_B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "2f08a5b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Carga máxima que soportan los pasadores [kN / m]\n"
     ]
    },
    {
     "data": {
      "text/latex": [
       "$\\displaystyle 9.75418635080043$"
      ],
      "text/plain": [
       "9.75418635080043"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fuerzas_apoyos = [F_A, F_B]\n",
    "w_max_apoyos = []\n",
    "for fuerza in fuerzas_apoyos:\n",
    "    esfuerzo_cortante = sp.Eq(fuerza / area_pasadores, FS_ultimo * 10 ** 6 / FS)\n",
    "    w_pasadores = sp.solve(esfuerzo_cortante)[0] / 1000\n",
    "    w_max_apoyos.append(w_pasadores)\n",
    "\n",
    "print(\"Carga máxima que soportan los pasadores [kN / m]\")\n",
    "carga_maxima = min(Wmax)\n",
    "carga_maxima"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "be9a3b0c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La fuerza del cable BD es de 2.43854658770011 kN\n",
      "La deformación del cable BD es de 0.000595238095238094 mm\n"
     ]
    }
   ],
   "source": [
    "# Deformación BD\n",
    "\n",
    "valor_F_bd = bdW.subs(w, carga_maxima)\n",
    "deformacion_F_bd = (valor_F_bd * 1000 * DB) / (area_cables * E * 10 ** 9)\n",
    "valor_F_bd, deformacion_F_bd * 1000\n",
    "print(\"La fuerza del cable BD es de \" + str(valor_F_bd) + \" kN\")\n",
    "print(\"La deformación del cable BD es de \" + str(deformacion_F_bd) + \" mm\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "c19f2df1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La fuerza del cable BC es de 1.86803506279441 kN\n",
      "La deformación del cable BC es de 0.000455978835189867 mm\n"
     ]
    }
   ],
   "source": [
    "# Deformación BC\n",
    "\n",
    "valor_F_bc = expresion_bcbd.subs([(F_bd, bdW), (w, carga_maxima)])\n",
    "deformacion_F_bc = (valor_F_bc * 1000 * CB) / (area_cables * E * 10 ** 9)\n",
    "valor_F_bc, deformacion_F_bc * 1000\n",
    "print(\"La fuerza del cable BC es de \" + str(valor_F_bc) + \" kN\")\n",
    "print(\"La deformación del cable BC es de \" + str(deformacion_F_bc) + \" mm\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "03a9135f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La fuerza del cable BE es de 1.56746753221702 kN\n",
      "La deformación del cable BE es de 0.000382611672432463 mm\n"
     ]
    }
   ],
   "source": [
    "# Deformación BE\n",
    "\n",
    "valor_F_be = expresion_bebd.subs([(F_bd, bdW), (w, carga_maxima)])\n",
    "deformacion_F_be = (valor_F_be * 1000 * EB) / (area_cables * E * 10 ** 9)\n",
    "# fuerza en kN y deformacion en mm\n",
    "valor_F_be, deformacion_F_be * 1000\n",
    "print(\"La fuerza del cable BE es de \" + str(valor_F_be) + \" kN\")\n",
    "print(\"La deformación del cable BE es de \" + str(deformacion_F_be) + \" mm\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "eb9b792c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La reaccion Ax es -2.22044604925031e-16 kN\n",
      "La reaccion Ay es de Ay - 39.5551268548924 kN\n"
     ]
    }
   ],
   "source": [
    "# Apoyo A\n",
    "\n",
    "R_Ax = Fx.subs([(F_be, valor_F_be), (F_bc, valor_F_bc)])\n",
    "R_Ax  = sp.solve(sp.Eq(R_Ax, 0))[0]\n",
    "R_Ay = Fy.subs([(F_be, valor_F_be), (F_bc, valor_F_bc), (F_bd, bdW), (w, carga_maxima)])\n",
    "valor_Ay = sp.solve(sp.Eq(R_Ay, 0))[0]\n",
    "print(\"La reaccion Ax es \" + str(R_Ax) + \" kN\")\n",
    "print(\"La reaccion Ay es de \" + str(R_Ay) + \" kN\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
